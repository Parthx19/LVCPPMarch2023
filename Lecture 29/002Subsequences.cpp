/*

Given a string of length n, generate all of its subsequences.

A subsequence of a given string (sequence) is a string (sequence) that is generated by
removing zero or more characters from the given string (sequence) without changing its
order.

Example

	Input : inp[] = "abc"
	Output: ["", "c", "b", "bc", "a", "ac", "ab", "abc"]

Constraints

  1 < n < 10

*/

#include<iostream>
#include<set>

using namespace std;

// set<string> s;

void f(char* inp, int i, char* out, int j, set<string>& s) {

	// base case
	if (inp[i] == '\0') {
		out[j] = '\0';
		// cout << out << endl;
		s.insert(string(out));
		return;
	}

	// recursive case

	// generate subsequences of inp[i...]

	// make a decision for the character present at the ith index

	// 1. include inp[i] in the out[]
	out[j] = inp[i];
	// j++;
	f(inp, i + 1, out, j + 1, s);
	// j--; // backtracking step

	// 2. exclude inp[i] from the out[]
	f(inp, i + 1, out, j, s);

}

int main() {

	char inp[] = "abc";
	char out[10];

	set<string> s;

	f(inp, 0, out, 0, s);

	for (string subseq : s) {
		cout << subseq << endl;
	}

	return 0;
}
